type Account {
	id: ID!
	name: String!
	externalid: String!
}

type AccountConnection {
	items: [Account]
	nextToken: String
}

input CreateAccountInput {
	name: String!
	externalid: String!
}

input DeleteAccountInput {
	id: ID!
}

type Mutation {
	createAccount(input: CreateAccountInput!): Account
	updateAccount(input: UpdateAccountInput!): Account
	deleteAccount(input: DeleteAccountInput!): Account
}

type Query {
	getAccount(id: ID!): Account
	listAccounts(filter: TableAccountFilterInput, limit: Int, nextToken: String): AccountConnection
}

type Subscription {
	onCreateAccount(id: ID, name: String, externalid: String): Account
		@aws_subscribe(mutations: ["createAccount"])
	onUpdateAccount(id: ID, name: String, externalid: String): Account
		@aws_subscribe(mutations: ["updateAccount"])
	onDeleteAccount(id: ID, name: String, externalid: String): Account
		@aws_subscribe(mutations: ["deleteAccount"])
}

input TableAccountFilterInput {
	id: TableIDFilterInput
	name: TableStringFilterInput
	externalid: TableStringFilterInput
}

input TableBooleanFilterInput {
	ne: Boolean
	eq: Boolean
}

input TableFloatFilterInput {
	ne: Float
	eq: Float
	le: Float
	lt: Float
	ge: Float
	gt: Float
	contains: Float
	notContains: Float
	between: [Float]
}

input TableIDFilterInput {
	ne: ID
	eq: ID
	le: ID
	lt: ID
	ge: ID
	gt: ID
	contains: ID
	notContains: ID
	between: [ID]
	beginsWith: ID
}

input TableIntFilterInput {
	ne: Int
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
	contains: Int
	notContains: Int
	between: [Int]
}

input TableStringFilterInput {
	ne: String
	eq: String
	le: String
	lt: String
	ge: String
	gt: String
	contains: String
	notContains: String
	between: [String]
	beginsWith: String
}

input UpdateAccountInput {
	id: ID!
	name: String
	externalid: String
}